import asyncio
import requests
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from config import bot_token

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ handlers.py
from handlers import (
    start_command, help_command, show_menu, start_order, process_size,
    process_ingredients, process_payment_callback, check_payment_callback,
    order_status, start_promo, apply_promo, random_combo, promotions, unknown_command,
    handle_alternative_payment, show_bonuses, use_bonuses_command, bonus_button_handler,
    use_bonuses_button, back_to_menu, process_bonus_amount, order_status_button
)

from states import OrderState, PromoState
from keyboards import main_keyboard

# –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
url = f'https://api.telegram.org/bot{bot_token}/deleteWebhook'
response = requests.get(url)
print(response.json())

bot = Bot(token=bot_token)
dp = Dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
dp.message.register(start_command, Command("start"))
dp.message.register(help_command, Command("help"))
dp.message.register(help_command, F.text == "–ü–æ–º–æ—â—å")
dp.message.register(show_menu, Command("menu"))
dp.message.register(show_menu, F.text == "–ú–µ–Ω—é")
dp.message.register(start_order, Command("order"))
dp.message.register(start_order, F.text == "–°–æ–±—Ä–∞—Ç—å —à–∞—É—Ä–º—É")
dp.message.register(process_size, OrderState.choosing_size)
dp.message.register(process_ingredients, OrderState.choosing_ingredients)
dp.message.register(order_status, Command("status"))
dp.message.register(order_status_button, F.text == "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞")  # –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
dp.message.register(start_promo, Command("promo"))
dp.message.register(start_promo, F.text == "üí∞ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
dp.message.register(apply_promo, PromoState.waiting_for_promo)
dp.message.register(random_combo, Command("random"))
dp.message.register(random_combo, F.text == "–†–∞–Ω–¥–æ–º–Ω—ã–π –Ω–∞–±–æ—Ä")
dp.message.register(promotions, Command("promotions"))
dp.message.register(promotions, F.text == "–ê–∫—Ü–∏–∏")
dp.message.register(show_bonuses, Command("bonus"))
dp.message.register(bonus_button_handler, F.text == "üíé –ú–æ–∏ –±–æ–Ω—É—Å—ã")
dp.message.register(use_bonuses_command, Command("use_bonus"))
dp.message.register(use_bonuses_button, F.text == "üí≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã")
dp.message.register(back_to_menu, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")

# –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±–æ–Ω—É—Å–æ–≤ –î–û unknown_command
dp.message.register(process_bonus_amount, PromoState.waiting_for_bonus_amount)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
dp.callback_query.register(process_payment_callback, F.data.startswith("pay_"))
dp.callback_query.register(check_payment_callback, F.data.startswith("check_payment_"))
dp.callback_query.register(handle_alternative_payment, F.data.startswith("alt_paid_"))

# –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï–î–ù–ò–ú)
dp.message.register(unknown_command)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç ROYALSHAWA –∑–∞–ø—É—â–µ–Ω!")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("‚Ä¢ /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
    print("‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
    print("‚Ä¢ /menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é")
    print("‚Ä¢ /order - –ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑")
    print("‚Ä¢ /status - –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞")
    print("‚Ä¢ /promo - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
    print("‚Ä¢ /random - –°–ª—É—á–∞–π–Ω—ã–π –Ω–∞–±–æ—Ä")
    print("‚Ä¢ /promotions - –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏")
    print("‚Ä¢ /bonus - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–∞—Ö")
    print("‚Ä¢ /use_bonus - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã")

    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main())